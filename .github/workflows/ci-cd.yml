name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test and Build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests with coverage
        run: mvn clean test jacoco:report

      - name: Generate test report
        uses: dorny/test-reporter@v1.9.1
        if: success() || failure()
        with:
          name: Maven Tests
          path: target/surefire-reports/*.xml
          reporter: java-junit
          max-annotations: 10
          fail-on-error: false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: success() || failure()
        with:
          file: target/site/jacoco/jacoco.xml
          fail_ci_if_error: false

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports-${{ github.run_number }}
          path: |
            target/surefire-reports/
            target/site/jacoco/

      - name: Build application
        run: mvn clean package -DskipTests

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: jwt-validator-jar
          path: target/*.jar

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run OWASP Dependency Check
        run: |
          mvn org.owasp:dependency-check-maven:check
        continue-on-error: true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: target/dependency-check-report.html

  build-and-push-image:
    runs-on: ubuntu-latest
    name: Build and Push Docker Image
    needs: [ test, security-scan ]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: build-and-push-image
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop"
          # Aqui você adicionaria os comandos específicos para deploy no seu ambiente de staging
          # Exemplos:
          # - kubectl apply -f k8s/staging/
          # - docker-compose -f docker-compose.staging.yml up -d
          # - aws ecs update-service --cluster staging --service jwt-validator --force-new-deployment

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against staging..."
          # Adicione aqui testes básicos para verificar se a aplicação está funcionando
          # curl -f http://staging-url/actuator/health || exit 1

  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: build-and-push-image
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          # Aqui você adicionaria os comandos específicos para deploy no seu ambiente de produção
          # Exemplos:
          # - kubectl apply -f k8s/production/
          # - docker-compose -f docker-compose.prod.yml up -d
          # - aws ecs update-service --cluster production --service jwt-validator --force-new-deployment

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against production..."
          # Adicione aqui testes básicos para verificar se a aplicação está funcionando
          # curl -f http://production-url/actuator/health || exit 1

      - name: Notify deployment success
        run: |
          echo "Production deployment completed successfully!"
          # Aqui você pode adicionar notificações (Slack, Teams, email, etc.)
